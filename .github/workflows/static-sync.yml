name: Deploy Static to Azure Storage

on:
  push:
    branches: [ main ]
    paths:
      - "static/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-static-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to $web + set headers
        uses: azure/cli@v2
        env:
          ACCOUNT: p7costatic
        with:
          inlineScript: |
            set -euo pipefail

            # Ensure Static Website is enabled (idempotent)
            az storage blob service-properties update \
              --account-name "$ACCOUNT" \
              --static-website \
              --index-document index.html \
              --404-document 404.html \
              --only-show-errors

            # Upload everything under ./static to $web
            az storage blob upload-batch \
              --account-name "$ACCOUNT" \
              --auth-mode login \
              -s ./static \
              -d '$web' \
              --overwrite \
              --only-show-errors

            # Helper: safe loop over found files
            _set_blob() {
              local name="$1"; shift
              az storage blob update \
                --account-name "$ACCOUNT" \
                -c '$web' \
                -n "$name" \
                "$@" \
                --only-show-errors || true
            }

            # Root pages
            _set_blob index.html --content-type 'text/html; charset=utf-8'
            _set_blob 404.html   --content-type 'text/html; charset=utf-8'

            # HTML
            while IFS= read -r f; do
              _set_blob "$f" --content-type 'text/html; charset=utf-8'
            done < <(cd static && find . -type f -name '*.html' -printf '%P\n')

            # JSON (short cache)
            while IFS= read -r f; do
              _set_blob "$f" \
                --content-type 'application/json' \
                --content-cache-control 'public, max-age=300, must-revalidate'
            done < <(cd static && find . -type f -name '*.json' -printf '%P\n')

            # CSS / JS (long cache)
            while IFS= read -r f; do
              _set_blob "$f" \
                --content-type 'text/css; charset=utf-8' \
                --content-cache-control 'public, max-age=31536000, immutable'
            done < <(cd static && find . -type f -name '*.css' -printf '%P\n')

            while IFS= read -r f; do
              _set_blob "$f" \
                --content-type 'application/javascript; charset=utf-8' \
                --content-cache-control 'public, max-age=31536000, immutable'
            done < <(cd static && find . -type f -name '*.js' -printf '%P\n')

            # Images & icons (long cache)
            for ext in jpg jpeg png webp gif svg ico; do
              case "$ext" in
                jpg|jpeg) ctype="image/jpeg" ;;
                png)      ctype="image/png" ;;
                webp)     ctype="image/webp" ;;
                gif)      ctype="image/gif" ;;
                svg)      ctype="image/svg+xml" ;;
                ico)      ctype="image/x-icon" ;;
              esac
              while IFS= read -r f; do
                _set_blob "$f" \
                  --content-type "$ctype" \
                  --content-cache-control 'public, max-age=31536000, immutable'
              done < <(cd static && find . -type f -name "*.$ext" -printf '%P\n')
            done

            # PWA manifest (short cache)
            while IFS= read -r f; do
              _set_blob "$f" \
                --content-type 'application/manifest+json' \
                --content-cache-control 'public, max-age=300, must-revalidate'
            done < <(cd static && find . -type f -name '*.webmanifest' -printf '%P\n')
