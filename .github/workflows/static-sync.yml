name: Deploy Static to Azure Storage

on:
  push:
    branches: [ main ]
    paths: [ "static/**" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-static-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # precisamos do diff

      - name: Compute diff (static/**)
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.before }}"
          HEAD="${{ github.sha }}"

          if [[ "${{ github.event_name }}" != "push" || -z "${BASE:-}" || "${BASE}" == "0000000000000000000000000000000000000000" ]]; then
            echo "Initial/dispatch run → full upload."
            git ls-files 'static/**' > .changed.txt || true
            : > .deleted.txt
          else
            git diff --name-status "$BASE" "$HEAD" -- 'static/**' > .diff || true
            awk '$1=="A"||$1=="M"{print $2}' .diff > .changed.txt
            awk '$1=="D"{print $2}' .diff > .deleted.txt
          fi

          echo "Changed files:"
          sed -n '1,200p' .changed.txt || true
          echo "Deleted files:"
          sed -n '1,200p' .deleted.txt || true

          echo "changed=$(wc -l < .changed.txt | tr -d ' ')" >> "$GITHUB_OUTPUT"
          echo "deleted=$(wc -l < .deleted.txt | tr -d ' ')" >> "$GITHUB_OUTPUT"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # evita abrir o container se não há nada para fazer
      - name: Deploy changed files to $web (AAD)
        if: ${{ steps.diff.outputs.changed != '0' || steps.diff.outputs.deleted != '0' }}
        uses: azure/cli@v2
        env:
          ACCOUNT: p7costatic
        with:
          inlineScript: |
            set -euo pipefail

            # Warmup AAD/RBAC
            for n in 1 2 3 4 5 6; do
              if az storage blob list --account-name "$ACCOUNT" -c '$web' --auth-mode login --num-results 1 >/dev/null 2>&1; then
                echo "AAD access to ${ACCOUNT}/\$web OK"
                break
              fi
              echo "A aguardar propagação de RBAC… tentativa $n/6"
              sleep 10
            done

            upload_one () {
              local src="$1"
              local rel="${src#static/}"
              [[ -f "$src" ]] || return 0

              local ctype=""
              case "$rel" in
                *.html) ctype='text/html; charset=utf-8' ;;
                *.json) ctype='application/json' ;;
                *.css)  ctype='text/css; charset=utf-8' ;;
                *.js)   ctype='application/javascript; charset=utf-8' ;;
                *.jpg|*.jpeg) ctype='image/jpeg' ;;
                *.png)  ctype='image/png' ;;
                *.webp) ctype='image/webp' ;;
                *.gif)  ctype='image/gif' ;;
                *.svg)  ctype='image/svg+xml' ;;
                *.ico)  ctype='image/x-icon' ;;
                *.md)   ctype='text/markdown; charset=utf-8' ;;
                *.webmanifest) ctype='application/manifest+json' ;;
              esac

              az storage blob upload \
                --account-name "$ACCOUNT" \
                --auth-mode login \
                --container '$web' \
                --file "$src" \
                --name "$rel" \
                --overwrite true \
                --only-show-errors

              local cache=""
              case "$rel" in
                *.json|*.webmanifest) cache='public, max-age=300, must-revalidate' ;;
                *.css|*.js|*.jpg|*.jpeg|*.png|*.webp|*.gif|*.svg|*.ico) cache='public, max-age=31536000, immutable' ;;
              esac

              if [[ -n "${ctype}" || -n "${cache}" ]]; then
                az storage blob update \
                  --account-name "$ACCOUNT" \
                  --auth-mode login \
                  -c '$web' \
                  -n "$rel" \
                  ${ctype:+--content-type "$ctype"} \
                  ${cache:+--content-cache-control "$cache"} \
                  --only-show-errors >/dev/null || true
              fi
            }

            delete_one () {
              local src="$1"
              local rel="${src#static/}"
              az storage blob delete \
                --account-name "$ACCOUNT" \
                --auth-mode login \
                --container '$web' \
                --name "$rel" \
                --only-show-errors || true
            }

            any=false
            if [[ -s .changed.txt ]]; then
              while IFS= read -r f; do
                [[ -z "$f" ]] && continue
                echo "↑ CHANGED: $f"
                upload_one "$f"
                any=true
              done < .changed.txt
            fi

            if [[ -s .deleted.txt ]]; then
              while IFS= read -r f; do
                [[ -z "$f" ]] && continue
                echo "× DELETED: $f"
                delete_one "$f"
                any=true
              done < .deleted.txt
            fi

            # Garantir headers base se existirem
            for f in index.html 404.html; do
              if [[ -f "static/$f" ]]; then
                az storage blob update \
                  --account-name "$ACCOUNT" \
                  --auth-mode login \
                  -c '$web' \
                  -n "$f" \
                  --content-type 'text/html; charset=utf-8' \
                  --only-show-errors >/dev/null || true
              fi
            done

            $any || echo "Nada para publicar."

      - name: Nothing to deploy
        if: ${{ steps.diff.outputs.changed == '0' && steps.diff.outputs.deleted == '0' }}
        run: echo "Nada para publicar."
